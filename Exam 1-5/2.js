//2.1)คำตอบคือ something went wrong เพราะเมื่อกำหนดค่าให้ b = a + c เนื่องจาก c เป็น ‘’ มีค่าเป็น string ทำให้ตัวแปร b มีค่าเป็น 1 แต่ประเภทตัวแปลกลายเป็น string
// ทำให้เช็คเงื่อนไข a = b ไม่ได้เนื่องจาก b เป็นตัวแปรประเภท string แต่ a เป็นตัวแปรประเภท number
let a = 1;
let b = 2;
let c = "";
console.log(`a = ${a}, b = ${b}, c = ${c}`);
a += 0;
b = a + c;
console.log(`a = ${a}, b = ${b}, c = ${c}`);
console.log("now type of b is " + typeof b);
if (b === a) {
  console.log("a equal b");
} else {
  console.log("something went wrong");
}
console.log(
  "2.1)คำตอบคือ something went wrong เพราะเมื่อกำหนดค่าให้ b = a + c เนื่องจาก c เป็น ‘’ มีค่าเป็น string ทำให้ตัวแปร b มีค่าเป็น 1 แต่ประเภทตัวแปลกลายเป็น string ทำให้เช็คเงื่อนไข a = b ไม่ได้เนื่องจาก b เป็นตัวแปรประเภท string แต่ a เป็นตัวแปรประเภท number"
);
console.log("//---------------------------//");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2.2) คำสั่งแรกเป็นการตั้งชื่อฟังก์ชันแบบมีชื่อหรือแบบทั่วไปที่พบได้บ่อย(Function Declarations) และเมื่อต้องการใช้ฟังก์ชันจะเรียกใช้ผ่านชื่อฟังก์ชันที่ชื่อ
// โดยคำสั่งที่สองเป็นการเขียนฟังก์ชันโดยละเว้นชื่อ(function expression) โดยใช้ตัวแปร square ในการเรียกใช้ฟังก์ชันแทนชื่อ สิ่งที่แตกต่างระหว่าง
// สองฟังก์ชันคือ Function expression นั้นจะถูกสร้างในตอนที่โปรแกรมทำงานขณะที่ฟังก์ชันปกติจะถูกสร้างในตอนที่โปรแกรมคอมไพล์
//  แปลว่าหากมีการเรียกใช้ Function expression ก่อนที่มันจะถูกสร้างขึ้นโปรแกรมจะ error
console.log(square(5));

var square = function (n) {
  return n * n;
};
//---------------------------//
console.log(square(5));

function square(n) {
  return n * n;
}
console.log(
  "2.2) คำสั่งแรกเป็นการตั้งชื่อฟังก์ชันแบบมีชื่อหรือแบบทั่วไปที่พบได้บ่อย(Function Declarations) และเมื่อต้องการใช้ฟังก์ชันจะเรียกใช้ผ่านชื่อฟังก์ชันที่ชื่อ โดยคำสั่งที่สองเป็นการเขียนฟังก์ชันโดยละเว้นชื่อ(function expression) โดยใช้ตัวแปร square ในการเรียกใช้ฟังก์ชันแทนชื่อ สิ่งที่แตกต่างระหว่าง สองฟังก์ชันคือ Function expression นั้นจะถูกสร้างในตอนที่โปรแกรมทำงาน ในขณะที่ฟังก์ชันปกติจะถูกสร้างในตอนที่โปรแกรมคอมไพล์ แปลว่าหากมีการเรียกใช้ Function expression ก่อนที่มันจะถูกสร้างขึ้นโปรแกรมจะ error"
);
